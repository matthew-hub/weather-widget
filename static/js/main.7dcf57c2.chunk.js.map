{"version":3,"sources":["components/DaysList.js","components/CityNames.js","components/Weather.js","container/App.js","index.js"],"names":["DaysList","props","currentDay","Date","date","getDay","days","map","day","index","dayTempInfo","tempType","Math","round","temperature","react_default","a","createElement","className","key","daysNames","concat","type","toLowerCase","pollenCount","Fragment","CityNames","_props$cityData","cityData","cities","cityId","selectCity","click","cityList","city","onClick","id","name","Weather","_props$weather","weather","error","isLoaded","content","newDate","weatherDate","getMonth","getDate","d","nth","weatherTemp","tempInfo","tempChange","charAt","toUpperCase","weatherType","replace","trim","slice","precipitation","humidity","windInfo","speed","direction","src_components_DaysList","src_components_CityNames","App","currentDate","toISOString","state","handleTempChange","_this","setState","handleCityChange","fetchWeather","_this2","this","fetch","then","response","ok","json","Error","data","catch","_this3","API","fetchCity","message","src_components_Weather","Component","ReactDOM","render","src_container_App","document","getElementById"],"mappings":"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","file":"static/js/main.7dcf57c2.chunk.js","sourcesContent":["import React from 'react';\r\nimport \"./DaysList.scss\";\r\n\r\nconst DaysList = (props) => {\r\n  \r\n  // get current day \r\n  const currentDay = new Date(props.date).getDay();\r\n \r\n  const days = props.days.map((day, index) => {\r\n\r\n    // get number of each day\r\n    let date = new Date(day.date).getDay();\r\n\r\n    let dayTempInfo = (props.tempType === \"fanhrenheit\" ? Math.round(day.temperature * 9 / 5 + 32) : day.temperature) ;\r\n  \r\n    return (\r\n      <div className=\"weather__days__list\" key={index}>\r\n        <div className=\"list__day\">{date === currentDay ? \"Today\": props.daysNames[date]}</div> \r\n        <div className={`list__avatar ${day.type.toLowerCase()}`}></div>\r\n        <div className=\"list__temp\">{dayTempInfo}{props.tempType === \"fanhrenheit\" ? <sup>°F</sup> : <sup>°C</sup>}</div>\r\n        <div className=\"list__pollen\">{\"Pollen \" + day.pollenCount}</div>\r\n      </div>\r\n    )\r\n  })\r\n\r\n  return (  \r\n    <>\r\n      {days}\r\n    </>\r\n  );\r\n}\r\n \r\nexport default DaysList;","import React from 'react';\r\nimport './CityNames.scss'\r\n\r\nconst CityNames = (props) => {\r\n\r\n  // destructuring assignment variables from props\r\n  const {cities, cityId, selectCity, click} = props.cityData;\r\n\r\n  const cityList = cities.map(city => {\r\n    return (\r\n      <li onClick={() => click(city.id, city.name)} key={city.id}>{city.name}</li>\r\n    )\r\n  })\r\n\r\n  return ( \r\n    <div className=\"weather__city\">\r\n      <div className=\"city__dropdown\">\r\n        <h3>{cityId === null ? \"Select City\" : selectCity}</h3>\r\n        <ul className=\"city__list\">\r\n          {cityList}\r\n        </ul>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n \r\nexport default CityNames;","import React from 'react';\r\nimport './Weather.scss'\r\nimport DaysList from './DaysList';\r\nimport CityNames from './CityNames'\r\n\r\nconst Weather = (props) => {\r\n\r\n  // destructuring assignment variables from props\r\n  const {cities, error, isLoaded, weather, cityId, selectCity, tempType} = props.weather;\r\n\r\n  const daysNames = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']; \r\n  const monthNames = ['January', 'February', 'March', \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\r\n\r\n  // get city data for passing to the component\r\n  const cityData = {\r\n    cityId,\r\n    selectCity,\r\n    cities,\r\n    click: props.click,\r\n  }\r\n\r\n  let content = null;\r\n\r\n  let newDate = new Date(props.date);\r\n \r\n  // get ordinal numbers\r\n  const nth = (d) => {\r\n    if(d > 3 && d < 21) return 'th'; \r\n    switch (d % 10) {\r\n      case 1:  \r\n        return \"st\";\r\n      case 2:  \r\n        return \"nd\";\r\n      case 3:  \r\n        return \"rd\";\r\n      default: \r\n        return \"th\";\r\n     }\r\n  }\r\n\r\n  // get full date of current day \r\n  let weatherDate = daysNames[newDate.getDay()] + \", \" + monthNames[newDate.getMonth()] + ' ' + newDate.getDate() + nth(newDate.getDate());\r\n\r\n  // check if weather data was downloaded\r\n  if(isLoaded && weather && !error){\r\n\r\n    let weatherTemp = (tempType === \"fanhrenheit\" ? Math.round(weather[0].temperature * 9 / 5 + 32) : weather[0].temperature);\r\n\r\n    let tempInfo = (\r\n      <div className=\"weather__info--temp\">{weatherTemp}\r\n          <sup className=\"temp__active\" onClick={() => props.tempChange(tempType)}>{'°' + tempType.charAt(0).toUpperCase()} | </sup>\r\n          <sup onClick={() => {\r\n            tempType === \"celsius\" ? props.tempChange(\"fanhrenheit\") : props.tempChange(\"celsius\");\r\n          }}>{tempType === \"celsius\" ? \"°F\" : \"°C\"}</sup>\r\n      </div>\r\n    )\r\n\r\n    // find capital letters in string || insert space before capital letters\r\n    let weatherType = weather[0].type.replace(/([A-Z])/g, ' $1').trim();\r\n\r\n    // changed string to lowercase letters\r\n    weatherType = weatherType.toLowerCase(); \r\n    // set first letter to upperscase || add rest string to first letter\r\n    weatherType = weatherType.charAt(0).toUpperCase() + weatherType.slice(1);\r\n  \r\n    content = (\r\n      <>\r\n        <div className=\"weather__info\">\r\n          <div className=\"weather__info--date\">{weatherDate}</div>\r\n          <div className=\"weather__info--type\">{weatherType}</div>\r\n          <div className={`weather__info--avatar ${weather[0].type.toLowerCase()}`}></div>\r\n          <div className=\"weather__info--temp\">{tempInfo}</div>\r\n          <div className=\"weather__info--more\">\r\n            <ul>\r\n              <li>Precipitation: <span>{weather[0].precipitation + \"%\"}</span> </li>\r\n              <li>Humidity: <span>{weather[0].humidity + \"%\"}</span> </li>\r\n              <li>Wind: <span>{weather[0].windInfo.speed + \" mph \" + weather[0].windInfo.direction }</span> </li>\r\n              <li>Pollen Count: <span>{weather[0].pollenCount}</span> </li>\r\n            </ul>\r\n          </div>\r\n        </div>\r\n        <div className=\"weather__days\">\r\n          <DaysList days={weather}  tempType={tempType} date={props.date} daysNames={daysNames}/> \r\n        </div>\r\n      </>\r\n    )\r\n  }\r\n\r\n  return (  \r\n    <div className=\"weather\">\r\n      <CityNames cityData={cityData}/>\r\n      {isLoaded === false ? <h3>Loadding...</h3> : content}\r\n    </div>\r\n  );\r\n}\r\n \r\nexport default Weather;","import React, { Component } from 'react';\r\nimport Weather from '../components/Weather'\r\nimport './App.scss';\r\n\r\nclass App extends Component {\r\n\r\n  currentDate = new Date().toISOString().slice(0, 10); // get current date\r\n\r\n  state = {\r\n    cities: [],\r\n    cityId: null,\r\n    selectCity: '',\r\n    isLoaded: false,\r\n    error: false,\r\n    weather: '',\r\n    tempType: \"fanhrenheit\",\r\n  }\r\n\r\n  // fetch city name from weather API\r\n  fetchCity () {\r\n    fetch('http://dev-weather-api.azurewebsites.net/api/city').then(\r\n      response => {\r\n        if(response.ok){\r\n          return response.json()\r\n        } else {\r\n          throw Error('Download data error');\r\n        }\r\n      }\r\n    ).then(data => {\r\n      this.setState({\r\n        cities: data,\r\n        cityId: data[0].id,\r\n        selectCity: data[0].name,\r\n      }, this.fetchWeather); // set state for cities name, after download weather data\r\n    }).catch(error => {\r\n      this.setState({ error })\r\n    })\r\n  }\r\n\r\n  // fetch weather data from API \r\n  fetchWeather() {\r\n    let API = `http://dev-weather-api.azurewebsites.net/api/city/${this.state.cityId}/weather?date=${this.currentDate}`;\r\n    fetch(API).then(\r\n      response => {\r\n        if(response.ok){\r\n          return response.json();\r\n        } else {\r\n          throw Error('Download data error');\r\n        }\r\n      }\r\n    ).then( data => {\r\n      this.setState({\r\n        weather: data,\r\n        isLoaded: true\r\n      })\r\n    })\r\n  }  \r\n\r\n  // change temperature\r\n  handleTempChange = (type) => {\r\n    this.setState({ tempType: type });\r\n  }\r\n\r\n  // handle click, selected city name, update setState\r\n  handleCityChange = (id, city) => {\r\n    this.setState({ \r\n      cityId: id,\r\n      selectCity: city,\r\n      isLoaded: false,\r\n    }, this.fetchWeather);\r\n  }  \r\n\r\n  componentDidMount(){\r\n    this.fetchCity(); // fetach city name when component mounted\r\n  }\r\n\r\n  render() {\r\n\r\n    // display any error when fetch fail\r\n    if(this.state.error) {\r\n      return <h1>{this.state.error.message}</h1>\r\n    }\r\n \r\n    return (\r\n      <div className=\"App\">\r\n       <Weather date={this.currentDate} weather={this.state} click={this.handleCityChange} tempChange={this.handleTempChange}/>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './container/App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n\r\n"],"sourceRoot":""}